#! python3
# phoneAndEmail.py - Находит телефонные номера и 
# адреса электронной почты в буфере обмена

#====== Создание регулярного выражения для телефонных номеров ================
import pyperclip, re

phoneRegex = re.compile(r'''(
    (\d{3}|\(\d{3}\))?              # Код региона => 111 или (111) => ()? необязательная группа 
    (\s|-|\.)?                      # Разделитель(не обязательный) => Пробел или дефис или точка
    (\d{3})                         # Первые 3 цифры => 111
    (\s|-|\.)                       # Разделитель(обязательный) => Пробел или дефис или любой символ за исключением новой строки
    (\d{4})                         # Последние 4 цифры    
    (\s*(ext|x|ext.)\s*(\d{2,5}))?  # Добавочный номер => Произвольное кол-во пробелов s* => за которым след. буквенное обозначеие ext, x, ext. => за которым идёт добавочный номер содержащий от 2 до 5 цифр
    )''', re.VERBOSE)


# Если выскакивает ошибка missing, unterminated subpattern => Проверить корректность использования скобок

#====== Создание регулярного выражения для адресов электронной почты =========
emailRegex = re.compile(r'''(
    [a-zA-Z0-9._%+-]+               # Имя пользователя
    @                               # Символ @
    [a-zA-Z0-9.-]+                  # Домен (hotmail/gmail etc.)
    (\.[a-zA-Z]{2,4})               # Домен верхнего уровня => содержит точку. и от 2 до 4 символов(.com .ru)
    )''', re.VERBOSE)

#====== Поиск всех совпадений в тексте скопированном в буфер обмена =========
text = str(pyperclip.paste())       

matches = []                                # Сюда(в переменную) заносим список совпадений
for groups in phoneRegex.findall(text):
    phoneNum = '-'.join([groups[1], groups[3], groups[5]]) # 111-111-1111 !Важно: Группе 0 соответствует всё регулярное выражение
    if groups[8] != '':                                    # Если что либо записано в добавочном номере
        phoneNum += ' x' + groups[8]
    matches.append(phoneNum)
for groups in emailRegex.findall(text):     
    matches.append(groups[0])               # формат одинаковый поэтому есть только одна группа         

#====== Копирование результатов в буфер обмена ==============================
# Функция pyperclip.copy() получает одиночную строку  а не список поэтому для списка matches[] необходимо вызвать метод .join()

if len(matches) > 0:
    pyperclip.copy('\n'.join(matches))
    print('Скопировано в буфер обмена:')
    print('\n'.join(matches))
else:
    print('Телефонные номера и адреса эл. почты не обнаружены.')






